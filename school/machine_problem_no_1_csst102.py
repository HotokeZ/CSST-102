# -*- coding: utf-8 -*-
"""Machine Problem no.1 CSST102.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vXO2leTWMhauWpSFAyp8wZPhb2zhklks
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("iris_dataset.csv")
print(df.head(5))

print(df.info)
print(df.describe())
print(df['species'].value_counts())

df['sepal length (cm)'].hist()
plt.title("Sepal Length Distribution")
plt.show()

sns.scatterplot(data=df, x="petal length (cm)", y="petal width (cm)", hue="species")
plt.title("Petal Length vs. Petal Width")
plt.show

#What is the input (features)?
#-Measurements of the iris flowers
#What is the output (label)?
#-Species of the iris flower
#Is this supervised or unsupervised learning?
#-Supervised as the dataset contains labeled examples where each measurement of the flowers are labeled



from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

X = df[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']]
y = df['species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training data shape:", X_train.shape, y_train.shape)
print("Testing data shape:", X_test.shape, y_test.shape)

model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the Logistic Regression model: {accuracy}")

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

x = df.drop("species", axis = 1)
y = df["species"]

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

#What would happen if the dataset had missing or wrong values?
#-Missing values can lead to errors during model training and prediction.
#Wrong values can skew the model's learning process and lead to inaccurate predictions.

#How does this relate to real-world ML applications?
#-Overfitting and underfitting are commong challenges in real-world machine learning as real world datasets often contain missing data, errors, and inconcsistencies

y_pred = clf.predict(X_test)

print("Accuract: ", accuracy_score(y_test, y_pred))
print("Confusion Matrix: \n", confusion_matrix(y_test, y_pred))

#What ML type did you use?
#-Supervised Learning
#What challenges might affect the model?
#-Bad data, overfitting, and underfitting